#include "main.h"
#include <elf.h>
#include <string.h>
#define BUF_SIZE 64

void error_exit(char *message);
void print_magic(unsigned char *e_ident);
void print_class(unsigned char *e_ident);
void print_data(unsigned char *e_ident);
void print_version(unsigned char *e_ident);
void print_osabi(unsigned char *e_ident);
void print_abiversion(unsigned char *e_ident);
void print_type(unsigned int e_type);
void print_entry(Elf64_Addr e_entry);
void print_elf_header(int elf_fd);
/**
* error_exit - prints an error message to stderr and exits with status code 98
* @message: the error message to print
*/
void error_exit(char *message)
{
	dprintf(STDERR_FILENO, "%s", message);
	exit(98);
}
/**
* print_magic - prints the magic numbers in the ELF header
* @e_ident: the ELF header identification array
*/
void print_magic(unsigned char *e_ident)
{
	int i;

	printf("  Magic:   ");
	for (i = 0; i < EI_NIDENT; i++)
	printf("%02x ", e_ident[i]);
	printf("\n");
}
/**
* print_class - prints the ELF file class (32-bit or 64-bit)
* @e_ident: the ELF header identification array
*/
void print_class(unsigned char *e_ident)
{
	printf("  Class:                             ");
	switch (e_ident[EI_CLASS])
	{
	case ELFCLASSNONE:
		printf("none\n");
		break;
	case ELFCLASS32:
		printf("ELF32\n");
		break;
	case ELFCLASS64:
		printf("ELF64\n");
		break;
	default:
		printf("<unknown: %x>\n", e_ident[EI_CLASS]);
		break;
	}
}
/**
* print_data - prints the ELF file data encoding (little-endian or big-endian)
* @e_ident: the ELF header identification array
*/
void print_data(unsigned char *e_ident)
{
	printf("  Data:                              ");
	switch (e_ident[EI_DATA])
	{
	case ELFDATANONE:
		printf("none\n");
		break;
	case ELFDATA2LSB:
		printf("2's complement, little endian\n");
		break;
	case ELFDATA2MSB:
		printf("2's complement, big endian\n");
		break;
	default:
		printf("<unknown: %x>\n", e_ident[EI_DATA]);
		break;
	}
}
/**
* print_version - prints the ELF file version
* @e_ident: the ELF header identification array
*/
void print_version(unsigned char *e_ident)
{
	printf("  Version:                           %d", e_ident[EI_VERSION]);
	if (e_ident[EI_VERSION] == EV_CURRENT)
	{
		printf(" (current)\n");
	}
	else
	{
		printf("\n");
	}
}
/**
* print_osabi - prints the operating system and ABI for the ELF file
* @e_ident: the ELF header identification array
*/
void print_osabi(unsigned char *e_ident)
{
	printf("  OS/ABI:                            ");
	switch (e_ident[EI_OSABI])
	{
	case ELFOSABI_NONE:
		printf("UNIX - System V\n");
		break;
	case ELFOSABI_HPUX:
		printf("UNIX - HP-UX\n");
		break;
	case ELFOSABI_NETBSD:
		printf("UNIX - NetBSD\n");
		break;
	case ELFOSABI_LINUX:
		printf("UNIX - Linux\n");
		break;
	case ELFOSABI_SOLARIS:
		printf("UNIX - Solaris\n");
		break;
	case ELFOSABI_AIX:
		printf("UNIX - AIX\n");
		break;
	case ELFOSABI_IRIX:
		printf("UNIX - IRIX\n");
		break;
	case ELFOSABI_FREEBSD:
		printf("UNIX - FreeBSD\n");
		break;
	case ELFOSABI_TRU64:
		printf("UNIX - TRU64\n");
		break;
	case ELFOSABI_MODESTO:
		printf("Novell - Modesto\n");
		break;
	case ELFOSABI_OPENBSD:
		printf("UNIX - OpenBSD\n");
		break;
	case ELFOSABI_ARM:
		printf("ARM\n");
		break;
	case ELFOSABI_STANDALONE:
		printf("Standalone App\n");
		break;
	default:
		printf("<unknown: %x>\n", e_ident[EI_OSABI]);
		break;
	}
}
/**
* print_abiversion - prints the ABI version for the ELF file
* @e_ident: the ELF header identification array
*/
void print_abiversion(unsigned char *e_ident)
{
	printf("  ABI Version:                       %d\n", e_ident[EI_ABIVERSION]);
}
/**
* print_type - prints the type of the ELF file
* @e_type: the ELF file type
*/
void print_type(unsigned int e_type)
{
	printf("  Type:                              ");
	switch (e_type)
	{
	case ET_NONE:
		printf("NONE (None)\n");
		break;
	case ET_REL:
		printf("REL (Relocatable file)\n");
		break;
	case ET_EXEC:
		printf("EXEC (Executable file)\n");
		break;
	case ET_DYN:
		printf("DYN (Shared object file)\n");
		break;
	case ET_CORE:
		printf("CORE (Core file)\n");
		break;
	default:
		printf("<unknown: %x>\n", e_type);
		break;
	}
}
/**
* print_entry - prints the entry point memory address for the ELF file
* @e_entry: the virtual address of the program entry point
*/
void print_entry(Elf64_Addr e_entry)
{
	printf("  Entry point address:               %lx\n", (unsigned long)e_entry);
}
/**
* print_elf_header - displays the information contained in the ELF header
* @elf_fd: the file descriptor of the ELF file to print
*/
void print_elf_header(int elf_fd)
{
	Elf64_Ehdr e_hdr;
	unsigned char e_ident[EI_NIDENT];
	ssize_t n;

	n = read(elf_fd, &e_hdr, sizeof(e_hdr));
	if (n < 0)
	{
		error_exit("read error");
	}
	if (n != sizeof(e_hdr))
	{
		error_exit("read error: incomplete ELF header");
	}
	memcpy(e_ident, e_hdr.e_ident, EI_NIDENT);
	print_magic(e_ident);
	print_class(e_ident);
	print_data(e_ident);
	print_version(e_ident);
	print_osabi(e_ident);
	print_abiversion(e_ident);
	print_type(e_hdr.e_type);

	print_entry(e_hdr.e_entry);
}
